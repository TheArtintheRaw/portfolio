import * as THREE from "three";
import React, { Suspense, useEffect, useRef, useState } from "react";
import { Canvas, useFrame, useThree } from "@react-three/fiber";
import {
  Environment,
  useGLTF,
  ContactShadows,
  Html,
  OrbitControls,
} from "@react-three/drei";
import { useSpring } from "@react-spring/core";
import { a as three } from "@react-spring/three";
import { a as web } from "@react-spring/web";
import CanvasLoader from "../Loader";
import { styles } from "../../styles";

function Laptop({ open, hinge, ...props }) {
  const group = useRef();
  // Load model
  const { nodes, materials } = useGLTF("/mac-draco.glb");
  // Take care of cursor state on hover
  const [hovered, setHovered] = useState(false);

  useEffect(
    () => void (document.body.style.cursor = hovered ? "pointer" : "auto"),
    [hovered]
  );
  // Make it float in the air when it's opened
  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    group.current.rotation.x = THREE.MathUtils.lerp(
      group.current.rotation.x,
      open ? Math.cos(t / 10) / 10 + 0.25 : 0,
      0.1
    );
    group.current.rotation.y = THREE.MathUtils.lerp(
      group.current.rotation.y,
      open ? Math.sin(t / 10) / 4 : 0,
      0.1
    );
    group.current.rotation.z = THREE.MathUtils.lerp(
      group.current.rotation.z,
      open ? Math.sin(t / 10) / 10 : 0,
      0.1
    );
    group.current.position.y = THREE.MathUtils.lerp(
      group.current.position.y,
      open ? (-2 + Math.sin(t)) / 3 : -4.3,
      0.1
    );
  });
  // The view was auto-generated by: https://github.com/pmndrs/gltfjsx
  // Events and spring animations were added afterwards
  return (
    <group
      ref={group}
      {...props}
      onPointerOver={(e) => e.stopPropagation(setHovered(true))}
      onPointerOut={(e) => setHovered(false)}
      dispose={null}
    >
      <three.group rotation-x={hinge} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            material={materials.aluminium}
            geometry={nodes["Cube008"].geometry}
          />
          <mesh
            material={materials["matte.001"]}
            geometry={nodes["Cube008_1"].geometry}
          />
          <mesh
            material={materials["screen.001"]}
            geometry={nodes["Cube008_2"].geometry}
          />
        </group>
      </three.group>
      <mesh
        material={materials.keys}
        geometry={nodes.keyboard.geometry}
        position={[1.79, 0, 3.45]}
      />
      <group position={[0, -0.1, 3.39]}>
        <mesh
          material={materials.aluminium}
          geometry={nodes["Cube002"].geometry}
        />
        <mesh
          material={materials.trackpad}
          geometry={nodes["Cube002_1"].geometry}
        />
      </group>
      <mesh
        material={materials.touchbar}
        geometry={nodes.touchbar.geometry}
        position={[0, -0.03, 1.2]}
      />
      <Html distanceFactor={10}>
        <div className='content'>
          Click Me <br />
          Spin Me
        </div>
      </Html>
    </group>
  );
}

export default function LaptopCanvas() {
  // This flag controls open state, alternates between true & false
  const [open, setOpen] = useState(false);
  // We turn this into a spring animation that interpolates between 0 and 1
  const props = useSpring({ open: Number(open) });
  return (
    <web.main
      style={{
        background: props.open.to([0, 1], ["#f3f3f3", "#14ffcb"]),
        zIndex: props.open.to([0, 1], [0, 2]),
      }}
    >
      <web.h1
        style={{
          opacity: props.open.to([0, 1], [1, 0]),
        }}
        className={`${styles.heroHeadText} text-primary z-1 text-center`}
      >
        Hi, I'm <span className='text-tertiary'>Roger</span>
      </web.h1>

      <web.h1
        className={`${styles.heroHeadText} laptop-open text-secondary dark-text-primary`}
        style={{
          zIndex: 2,
          opacity: props.open.to([0, 1], [0, 1]),
          transform: props.open.to((o) => `translate3d( 1/4, 2/5, 0)`),
        }}
      >
        A philomath for web development.
      </web.h1>

      <Canvas dpr={[1, 2]} camera={{ position: [0, 0, -20], fov: 40 }}>
        <three.pointLight
          position={[10, 10, 10]}
          intensity={1.5}
          color={props.open.to([0, 1], ["#14FFCB", "#F3F3f3"])}
        />
        <Suspense fallback={<CanvasLoader />}>
          <group
            rotation={[0, Math.PI, 0]}
            onClick={(e) => e.stopPropagation(setOpen(!open))}
          >
            <Laptop
              open={open}
              hinge={props.open.to([0, 1], [1.575, -0.425])}
            />
          </group>

          <Environment preset='city' />
        </Suspense>
        <OrbitControls
          enableDamping
          enablePan={false}
          enableZoom={false}
          maxPolarAngle={Math.PI / 2}
          minPolarAngle={Math.PI / 2}
        />
        <ContactShadows
          position={[0, -4.5, 0]}
          opacity={0.4}
          scale={20}
          blur={1.75}
          far={4.5}
        />
      </Canvas>

      <web.img
        src='logo.png'
        className='absolute invisible md:visible flex md:flex-end items-center m-10 justify-center h-[100px] w-[175px] right-0 top-0'
        style={{ opacity: props.open.to([1, 0], [0, 1]) }}
      />
    </web.main>
  );
}
